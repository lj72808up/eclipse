一. Mybatis是什么
  Mybatis是优秀的持久层框架,它用来解决几个问题 : 
 (1)避免程序中大段重复的jdbc代码
 (2)用向xml传递参数的形式,在程序中动态的形成sql语句
 (3)通过xml配置,自动封装jdbc的结果集,把查询结果映射成对象(并给结果集的类起别名)
 
二. mybatis-config.xml配置数据库连接
 (1)jdbc.properties配置数据库地址,用户名,密码
 	#driverClass=oracle.jdbc.driver.OracleDriver
	#url=jdbc:oracle:thin:@127.0.0.1:1521:XE
	#username=jk9db
	#password=jk
	
	driverClass=com.mysql.jdbc.Driver
	url=jdbc:mysql://127.0.0.1:3306/test
	username=root
	password=admin
 (2)mybatis-config.xml进行连接数据库,并加载sql-Mapping映射文件
	<?xml version="1.0" encoding="UTF-8" ?>
	<!DOCTYPE configuration
	  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
	  "http://mybatis.org/dtd/mybatis-3-config.dtd">
	  
	<configuration>
	
	  <properties resource="mybatis/jdbc.properties"/> <!-- 引入外部配置文件 , 路径写绝对路径,前面不带/-->
	  
	  <typeAliases> <!-- 顺序不能变 -->
	    <typeAlias type="beans.Person" alias="person"/>
	  </typeAliases>
	
	  <environments default="development"><!-- 配置连接数据库,可配置多个数据库连接,指定默认连接即可 -->
	    <environment id="development">
	      <transactionManager type="JDBC"/>  <!-- 由jdbc的连接管理事务 -->
	      <dataSource type="POOLED">         <!-- 配置数据源 -->
	        <property name="driver" value="${driverClass}"/>
	        <property name="url" value="${url}"/>
	        <property name="username" value="${username}"/>
	        <property name="password" value="${password}"/>
	      </dataSource>
	    </environment>
	  </environments>
	  
	  <mappers><!-- sql映射文件(封装结果集和动态sql形成) -->
	    <mapper resource="beans/person.xml"/> <!-- 绝对路径,前面不带/ -->
	    <mapper resource="beans/Order.xml"/> 
	  </mappers>
    </configuration>
    
三.sqlMapping的配置    
  1.结果集对应的类
  public class Person {

	private String name;
	private int age;
	private List<Order> olist; //产生一对多
	private School s;
	
	public Person() {   // 必须有空残构造,否则result无法映射
		super();
		
 	/*	省略了setter,getter方法 	*/
  }  
    
  public class Order {

	private String oid;
	private String oname;
	
	public Order() {
		super();
		
	/*	省略了setter,getter方法	*/
  }  
  
  public class School {
  // 不去反射结果集,就不用空参构造
	private String pid;
	private String sname;
  }
  2.person.xml配置文件
  	<?xml version="1.0" encoding="UTF-8" ?>
	<!DOCTYPE mapper
	  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="com.PersonMapper"> 
	  
	  <resultMap type="person" id="personmap"> <!-- person已经过typealias起别名 -->
	    <result property="name" column="name"/>
	    <result property="age" column="age"/>
	  </resultMap> 
	
	  <resultMap id="poMapper" type="person" extends="personmap"> <!-- resultmap是把结果集映射到对象,及时继承,也要写出结果集封装的类 -->
	    <collection property="olist" ofType="beans.Order">  <!-- 一对多的result map:用于left outer join的结果集封装 -->
	      <result property="oid" column="oid" />     
	      <result property="oname" column="name" />     
	    </collection>
	  </resultMap>
	  
	  <resultMap type="person" id="psMapper" extends="personmap">
	  	<association property="s" javaType="beans.School"><!-- person的属性 -->
	  		<result property="sname" column="sname" /> <!-- school的属性 -->
	  	</association>
	  </resultMap>
	
	  <sql id="personColumns">pid,name,age</sql> <!-- sql查询列 -->
	
	  <!-- 1.select传1个参数,返回java类型结果集 -->
	  <select id="selectPerson" parameterType="int" resultType="hashmap">  <!-- resulttype返回java类型 -->
	    select * from person where pid = #{pid}							   <!-- 传递一个参数,设置parametertype -->
	  </select>
	  
	  <!-- 2.select传对象的属性作为参数 -->
	  <select id="selectAllColumn" parameterType="person" resultMap="personmap"> <!-- "person"是别名 -->
	    select <include refid="personColumns"/> from person where pid=#{pid,jdbcType=VARCHAR}
	  </select>
	  
	  <!-- 3.insert语句无resultmap -->
	  <insert id="addPerson" parameterType="person">
	    insert into person(name,age) values(#{name},#{age})
	  </insert>
	  
	  <!-- 4.select传递多个参数,用数组传递 -->
	  <select id="selectIds" parameterType="int" resultMap="personmap">
	  	select <include refid="personColumns"/> from person where pid in 
	  	<foreach item="id" collection="array" open="(" close=")" separator=",">#{id}</foreach> 
	  </select>
	  
	  <!--5.select的动态where条件,自动加上and/or -->
	  <select id="selectPO" parameterType="map" resultMap="poMapper">
	  	select p.pid,o.name from (select pid,oid from person 
			<trim prefix="where" prefixOverrides="and">
			 <if test="name !=null">and name=#{name}</if>
			 <if test="age != null" > and age=#{age}</if>
			</trim>
	    )p left outer join orders o on p.oid=o.oid
	  </select>
	  
	  <select id="selectPS" parameterType="String" resultMap="psMapper">
	  	select p.name,s.sname from (select sid,name from person where name=#{name})p
	  	left outer join school s on p.sid=s.sid
	  </select>
	</mapper>
	
  3.查询程序  
   (1)通过加载配置文件形成SqlSessionFactory
   (2)由SqlSessionFactory产生Session作为一次事务
 public class TestPerson {

	@Test
	public void muti2one(){
		String config = "mybatis/mybatis-config.xml";
		InputStream is = new TestPerson().getClass().getClassLoader().getResourceAsStream(config);
		SqlSessionFactory sfFactory = new SqlSessionFactoryBuilder().build(is);
		SqlSession session = sfFactory.openSession();
		
		List l = session.selectList("com.PersonMapper.selectPS","lisi");
		System.out.println(l);
	}
	
	
	@Test
	public void testMuti(){ //多where条件
		String config = "mybatis/mybatis-config.xml";
		InputStream is = new TestPerson().getClass().getClassLoader().getResourceAsStream(config);
		SqlSessionFactory sfFactory = new SqlSessionFactoryBuilder().build(is);
		SqlSession session = sfFactory.openSession();
		
		Map map = new HashMap();
		map.put("name", "zhangsan");
		List l = session.selectList("com.PersonMapper.selectPO",map );
		System.out.println(l);
	}
	
	@Test
	public void fun1() throws InterruptedException{
		String config = "mybatis/mybatis-config.xml";
		InputStream is = this.getClass().getClassLoader().getResourceAsStream(config);
		SqlSessionFactory sfFactory = new SqlSessionFactoryBuilder().build(is);
		SqlSession session = sfFactory.openSession();
		
		//List<Map<String,Integer>> result = session.selectList("com.PersonMapper.selectPerson", 1);// [{age=22, name=lisi, pid=1}]
		//Map<String,Integer> result = session.selectOne("com.PersonMapper.selectPerson", 1);
		//List result = session.selectList("com.PersonMapper.selectAllColumn", "1"); //[Person [name=lisi, age=22]]
		int[] arr = {1,2};
		List pl = session.selectList("com.PersonMapper.selectIds",arr);
		System.out.println(pl);  // {age=22, name=lisi, pid=1}
		
		
	}
	
	@Test
	public void fun2(){
		String config = "mybatis/mybatis-config.xml";
		InputStream is = this.getClass().getClassLoader().getResourceAsStream(config);
		SqlSessionFactory sfFactory = new SqlSessionFactoryBuilder().build(is);
		SqlSession session = sfFactory.openSession();
		
		Person p = new Person("zhaoliu",24);
		session.insert("com.PersonMapper.addPerson", p);
		Thread.sleep(10000);
		session.commit();  //dml语句手动提交事务
	}

	
	public static void main(String[] args) throws ClassNotFoundException, SQLException, InterruptedException {
		Class.forName("oracle.jdbc.driver.OracleDriver");
		//jdbc如果不开启显示控制事务,自动提交事务
		Connection conn = DriverManager.getConnection("jdbc:oracle:thin:@10.1.198.63:1521:ai4ashow","miniaudita","miniaudita");
		conn.setAutoCommit(false);
		
		Statement stmt = conn.createStatement();
		Savepoint sp = conn.setSavepoint("aa");  //设置事务保存点
		stmt.execute("insert into aa values('999')");
		conn.rollback(sp);  //事务回滚
		stmt.execute("insert into aa values('111')");
		conn.commit();      //提交事务
	}
}
    
    
    
    
    
    
    
    
    
    